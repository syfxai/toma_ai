import React, { useRef, useState } from 'react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import type { Recipe, UiText } from '../types';
import FileTextIcon from './icons/FileTextIcon';
import ImageIcon from './icons/ImageIcon';
import RecipeImageExport from './RecipeImageExport';
import RecipeInfo from './RecipeInfo';

interface RecipeDisplayProps {
  recipe: Recipe;
  uiText: UiText;
}

const RecipeDisplay: React.FC<RecipeDisplayProps> = ({ recipe, uiText }) => {
  const exportImageRefDesktop = useRef<HTMLDivElement>(null);
  const exportImageRefMobile = useRef<HTMLDivElement>(null);
  
  const [isSavingImage, setIsSavingImage] = useState(false);
  const [isSavingPdf, setIsSavingPdf] = useState(false);

  const formatRecipeAsText = (): string => {
    const title = `RECIPE: ${recipe.recipeName}\n\n`;
    const description = `DESCRIPTION:\n${recipe.description}\n\n`;
    const details = `Prep Time: ${recipe.prepTime}\nCook Time: ${recipe.cookTime}\nTotal Time: ${recipe.totalTime}\nServings: ${recipe.servings}\n\n`;
    const ingredientsHeader = `--------------------\n\n${uiText.recipeIngredients.toUpperCase()}:\n`;
    const ingredientsList = recipe.ingredients.map(i => `- ${i}`).join('\n');
    const instructionsHeader = `\n\n--------------------\n\n${uiText.recipeInstructions.toUpperCase()}:\n`;
    const instructionsList = recipe.instructions.map((step, index) => `${index + 1}. ${step}`).join('\n');
    const footer = `\n\n--------------------\n\nGenerated by Toma AI by Syafiq Haron`;
    return `${title}${description}${details}${ingredientsHeader}${ingredientsList}${instructionsHeader}${instructionsList}${footer}`;
  };

  const handleDownloadTxt = () => {
    const textContent = formatRecipeAsText();
    const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${recipe.recipeName.replace(/\s/g, '_')}_recipe.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };
  
  const handleDownloadImage = async () => {
    setIsSavingImage(true);
    const isMobile = window.innerWidth < 768;
    const targetRef = isMobile ? exportImageRefMobile : exportImageRefDesktop;

    if (!targetRef.current) {
        setIsSavingImage(false);
        return;
    }

    try {
        const canvas = await html2canvas(targetRef.current, {
            scale: 2,
            useCORS: true,
            backgroundColor: '#ffffff',
        });
        const image = canvas.toDataURL('image/png', 1.0);
        const link = document.createElement('a');
        link.href = image;
        link.download = `${recipe.recipeName.replace(/\s/g, '_')}_recipe.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } catch (error) {
        console.error('Error generating canvas:', error);
        alert('Sorry, there was an error creating the image.');
    } finally {
        setIsSavingImage(false);
    }
  };
  
  const handleDownloadPdf = async () => {
    setIsSavingPdf(true);
    try {
        const doc = new jsPDF({
            orientation: 'portrait',
            unit: 'mm',
            format: 'a4'
        });

        // Set document properties
        doc.setProperties({
            title: recipe.recipeName,
            subject: `A recipe for ${recipe.recipeName}`,
            author: 'Toma AI Recipe Generator',
        });

        const pageWidth = doc.internal.pageSize.getWidth();
        const pageHeight = doc.internal.pageSize.getHeight();
        const margin = 15;
        const contentWidth = pageWidth - margin * 2;
        let y = margin; // Current y position

        const checkPageBreak = (neededHeight: number) => {
            if (y + neededHeight > pageHeight - margin) {
                doc.addPage();
                y = margin;
            }
        };

        // --- TITLE ---
        doc.setFont('Helvetica', 'bold');
        doc.setFontSize(22);
        doc.setTextColor(3, 105, 71); // Emerald-700
        const titleLines = doc.splitTextToSize(recipe.recipeName, contentWidth);
        doc.text(titleLines, pageWidth / 2, y, { align: 'center' });
        y += titleLines.length * 10;
        
        // --- DESCRIPTION ---
        checkPageBreak(15);
        doc.setFont('Helvetica', 'italic');
        doc.setFontSize(11);
        doc.setTextColor(75, 85, 99); // Gray-500
        const descriptionLines = doc.splitTextToSize(recipe.description, contentWidth);
        doc.text(descriptionLines, margin, y);
        y += (descriptionLines.length * 5) + 8;
        
        // --- RECIPE INFO ---
        checkPageBreak(20);
        doc.setDrawColor(229, 231, 235); // Gray-200
        doc.line(margin, y, pageWidth - margin, y); // Top border
        y += 8;
        doc.setFont('Helvetica', 'normal');
        doc.setFontSize(10);
        doc.setTextColor(17, 24, 39); // Gray-800
        const infoItems = [
            `${uiText.recipePrepTime}: ${recipe.prepTime}`,
            `${uiText.recipeCookTime}: ${recipe.cookTime}`,
            `${uiText.recipeTotalTime}: ${recipe.totalTime}`,
            `${uiText.recipeServings}: ${recipe.servings}`,
        ];
        // Display info in two columns
        doc.text(infoItems.slice(0, 2), margin, y);
        doc.text(infoItems.slice(2, 4), pageWidth / 2, y);
        y += 12;
        doc.line(margin, y, pageWidth - margin, y); // Bottom border
        y += 10;
        
        // --- INGREDIENTS ---
        checkPageBreak(15);
        doc.setFont('Helvetica', 'bold');
        doc.setFontSize(16);
        doc.setTextColor(4, 120, 87); // Emerald-600
        doc.text(uiText.recipeIngredients, margin, y);
        y += 8;
        
        doc.setFont('Helvetica', 'normal');
        doc.setFontSize(11);
        doc.setTextColor(55, 65, 81); // Gray-600
        recipe.ingredients.forEach(ingredient => {
            const lines = doc.splitTextToSize(`‚Ä¢ ${ingredient}`, contentWidth - 5);
            checkPageBreak(lines.length * 6);
            doc.text(lines, margin + 5, y);
            y += lines.length * 6;
        });
        y += 5;

        // --- INSTRUCTIONS ---
        checkPageBreak(15);
        doc.setFont('Helvetica', 'bold');
        doc.setFontSize(16);
        doc.setTextColor(4, 120, 87); // Emerald-600
        doc.text(uiText.recipeInstructions, margin, y);
        y += 8;

        doc.setFont('Helvetica', 'normal');
        doc.setFontSize(11);
        doc.setTextColor(55, 65, 81); // Gray-600
        recipe.instructions.forEach((step, index) => {
            const lines = doc.splitTextToSize(`${index + 1}. ${step}`, contentWidth - 5);
            checkPageBreak((lines.length * 6) + 3); // Add a little space between steps
            doc.text(lines, margin + 5, y);
            y += (lines.length * 6) + 3;
        });

        // --- FOOTER ---
        const footerY = pageHeight - 10;
        doc.setFontSize(8);
        doc.setTextColor(156, 163, 175); // Gray-400
        const footerText = `üçÖ Toma AI Recipe Generator by Syafiq Haron`;
        doc.text(footerText, pageWidth / 2, footerY, { align: 'center' });

        doc.save(`${recipe.recipeName.replace(/\s/g, '_')}_recipe.pdf`);
    } catch (error) {
        console.error('Error generating PDF:', error);
        alert('Sorry, there was an error creating the PDF.');
    } finally {
        setIsSavingPdf(false);
    }
  };


  const ExportButton: React.FC<{onClick: () => void, disabled?: boolean, icon: React.ReactNode, text: string}> = ({ onClick, disabled, icon, text }) => (
    <button
      onClick={onClick}
      disabled={disabled}
      className="flex items-center gap-2 px-4 py-2 bg-white/80 backdrop-blur-sm border border-gray-200/80 rounded-full shadow-md text-sm font-medium text-gray-700 hover:bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition-all disabled:opacity-50 disabled:cursor-wait"
    >
      {icon}
      <span>{text}</span>
    </button>
  );

  return (
    <>
      {/* Main view */}
      <div className="max-w-4xl mx-auto mt-12 bg-white/70 backdrop-blur-sm p-6 md:p-10 rounded-2xl shadow-lg border border-white/80 animate-fadeInUp">
        <div className="text-center mb-8">
          <h2 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-emerald-600 to-teal-500 bg-clip-text text-transparent pb-2">
            {recipe.recipeName}
          </h2>
          <p className="mt-2 text-gray-600 italic max-w-2xl mx-auto">{recipe.description}</p>
        </div>
        
        <RecipeInfo recipe={recipe} uiText={uiText} />

        <div className="text-center my-8 py-4 border-y border-gray-200/80">
          <h4 className="text-sm font-bold uppercase text-gray-500 tracking-wider mb-4">{uiText.exportTitle}</h4>
          <div className="flex flex-wrap justify-center items-center gap-4">
              <ExportButton onClick={handleDownloadTxt} icon={<FileTextIcon className="w-5 h-5 text-emerald-700" />} text={uiText.saveAsText} />
              <ExportButton 
                  onClick={handleDownloadImage}
                  disabled={isSavingImage}
                  icon={<ImageIcon className="w-5 h-5 text-emerald-700" />} 
                  text={isSavingImage ? uiText.saveAsImageSaving : uiText.saveAsImage} 
              />
              <ExportButton 
                onClick={handleDownloadPdf}
                disabled={isSavingPdf}
                icon={<FileTextIcon className="w-5 h-5 text-emerald-700" />} 
                text={isSavingPdf ? uiText.saveAsPdfSaving : uiText.saveAsPdf} 
              />
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div className="bg-emerald-50/50 p-6 rounded-xl">
            <h3 className="text-2xl font-semibold mb-4 border-b-2 border-emerald-300 pb-2 text-emerald-800">{uiText.recipeIngredients}</h3>
            <ul className="list-disc list-inside space-y-3 text-gray-700">
              {recipe.ingredients.map((ingredient, index) => (
                <li key={index}>{ingredient}</li>
              ))}
            </ul>
          </div>
          
          <div className="bg-emerald-50/50 p-6 rounded-xl animate-fadeInUp">
            <h3 className="text-2xl font-semibold mb-4 border-b-2 border-emerald-300 pb-2 text-emerald-800">{uiText.recipeInstructions}</h3>
            <ol className="list-decimal list-outside space-y-4 text-gray-700 leading-relaxed ml-5">
              {recipe.instructions.map((step, index) => (
                <li key={index}>{step}</li>
              ))}
            </ol>
          </div>
        </div>
      </div>
      
      {/* Hidden components for clean exports */}
      <div className="absolute -left-[9999px] -top-[9999px]">
        <RecipeImageExport recipe={recipe} ref={exportImageRefDesktop} layout="desktop" uiText={uiText} />
        <RecipeImageExport recipe={recipe} ref={exportImageRefMobile} layout="mobile" uiText={uiText} />
      </div>
    </>
  );
};

export default RecipeDisplay;