import React, { useRef, useState } from 'react';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';
import type { Recipe, UiText } from '../types';
import FileTextIcon from './icons/FileTextIcon';
import ImageIcon from './icons/ImageIcon';
import RecipeImageExport from './RecipeImageExport';
import RecipeInfo from './RecipeInfo';

interface RecipeDisplayProps {
  recipe: Recipe;
  uiText: UiText;
}

const RecipeDisplay: React.FC<RecipeDisplayProps> = ({ recipe, uiText }) => {
  const exportImageRefDesktop = useRef<HTMLDivElement>(null);
  const exportImageRefMobile = useRef<HTMLDivElement>(null);
  const exportPdfRef = useRef<HTMLDivElement>(null);
  
  const [isSavingImage, setIsSavingImage] = useState(false);
  const [isSavingPdf, setIsSavingPdf] = useState(false);

  const formatRecipeAsText = (): string => {
    const title = `RECIPE: ${recipe.recipeName}\n\n`;
    const description = `DESCRIPTION:\n${recipe.description}\n\n`;
    const details = `Prep Time: ${recipe.prepTime}\nCook Time: ${recipe.cookTime}\nTotal Time: ${recipe.totalTime}\nServings: ${recipe.servings}\n\n`;
    const ingredientsHeader = `--------------------\n\n${uiText.recipeIngredients.toUpperCase()}:\n`;
    const ingredientsList = recipe.ingredients.map(i => `- ${i}`).join('\n');
    const instructionsHeader = `\n\n--------------------\n\n${uiText.recipeInstructions.toUpperCase()}:\n`;
    const instructionsList = recipe.instructions.map((step, index) => `${index + 1}. ${step}`).join('\n');
    const footer = `\n\n--------------------\n\nGenerated by Toma AI by Syafiq Haron`;
    return `${title}${description}${details}${ingredientsHeader}${ingredientsList}${instructionsHeader}${instructionsList}${footer}`;
  };

  const handleDownloadTxt = () => {
    const textContent = formatRecipeAsText();
    const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${recipe.recipeName.replace(/\s/g, '_')}_recipe.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };
  
  const handleDownloadImage = async () => {
    setIsSavingImage(true);
    const isMobile = window.innerWidth < 768;
    const targetRef = isMobile ? exportImageRefMobile : exportImageRefDesktop;

    if (!targetRef.current) {
        setIsSavingImage(false);
        return;
    }

    try {
        const canvas = await html2canvas(targetRef.current, {
            scale: 2,
            useCORS: true,
            backgroundColor: '#ffffff',
        });
        const image = canvas.toDataURL('image/png', 1.0);
        const link = document.createElement('a');
        link.href = image;
        link.download = `${recipe.recipeName.replace(/\s/g, '_')}_recipe.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } catch (error) {
        console.error('Error generating canvas:', error);
        alert('Sorry, there was an error creating the image.');
    } finally {
        setIsSavingImage(false);
    }
  };
  
  const handleDownloadPdf = async () => {
    if (!exportPdfRef.current) return;
    setIsSavingPdf(true);

    try {
      const canvas = await html2canvas(exportPdfRef.current, {
        scale: 2.5, // Higher scale for better PDF quality
        useCORS: true,
        logging: false,
        backgroundColor: '#ffffff',
      });

      const imgData = canvas.toDataURL('image/png');
      
      // A4 dimensions in mm: 210 x 297
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      });

      const pdfWidth = pdf.internal.pageSize.getWidth();
      const pdfHeight = pdf.internal.pageSize.getHeight();
      const canvasWidth = canvas.width;
      const canvasHeight = canvas.height;
      const canvasAspectRatio = canvasWidth / canvasHeight;

      const margin = 15; // 15mm margin on each side
      const contentWidth = pdfWidth - (margin * 2);
      let contentHeight = contentWidth / canvasAspectRatio;

      // If content is too tall, it will be scaled down to fit, maintaining aspect ratio
      if (contentHeight > pdfHeight - (margin * 2)) {
        contentHeight = pdfHeight - (margin * 2);
      }

      const topPosition = (pdfHeight - contentHeight) / 2; // Center vertically

      pdf.addImage(imgData, 'PNG', margin, topPosition, contentWidth, contentHeight);
      pdf.save(`${recipe.recipeName.replace(/\s/g, '_')}_recipe.pdf`);

    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Sorry, there was an error creating the PDF.');
    } finally {
      setIsSavingPdf(false);
    }
  };

  const ExportButton: React.FC<{onClick: () => void, disabled?: boolean, icon: React.ReactNode, text: string}> = ({ onClick, disabled, icon, text }) => (
    <button
      onClick={onClick}
      disabled={disabled}
      className="flex items-center gap-2 px-4 py-2 bg-white/80 backdrop-blur-sm border border-gray-200/80 rounded-full shadow-md text-sm font-medium text-gray-700 hover:bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition-all disabled:opacity-50 disabled:cursor-wait"
    >
      {icon}
      <span>{text}</span>
    </button>
  );

  return (
    <>
      {/* Main view */}
      <div className="max-w-4xl mx-auto mt-12 bg-white/70 backdrop-blur-sm p-6 md:p-10 rounded-2xl shadow-lg border border-white/80 animate-fadeInUp">
        <div className="text-center mb-8">
          <h2 className="text-3xl sm:text-4xl font-bold bg-gradient-to-r from-emerald-600 to-teal-500 bg-clip-text text-transparent pb-2">
            {recipe.recipeName}
          </h2>
          <p className="mt-2 text-gray-600 italic max-w-2xl mx-auto">{recipe.description}</p>
        </div>
        
        <RecipeInfo recipe={recipe} uiText={uiText} />

        <div className="text-center my-8 py-4 border-y border-gray-200/80">
          <h4 className="text-sm font-bold uppercase text-gray-500 tracking-wider mb-4">{uiText.exportTitle}</h4>
          <div className="flex flex-wrap justify-center items-center gap-4">
              <ExportButton onClick={handleDownloadTxt} icon={<FileTextIcon className="w-5 h-5 text-emerald-700" />} text={uiText.saveAsText} />
              <ExportButton 
                  onClick={handleDownloadImage}
                  disabled={isSavingImage}
                  icon={<ImageIcon className="w-5 h-5 text-emerald-700" />} 
                  text={isSavingImage ? uiText.saveAsImageSaving : uiText.saveAsImage} 
              />
              <ExportButton 
                onClick={handleDownloadPdf}
                disabled={isSavingPdf}
                icon={<FileTextIcon className="w-5 h-5 text-emerald-700" />} 
                text={isSavingPdf ? uiText.saveAsPdfSaving : uiText.saveAsPdf} 
              />
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          <div className="bg-emerald-50/50 p-6 rounded-xl">
            <h3 className="text-2xl font-semibold mb-4 border-b-2 border-emerald-300 pb-2 text-emerald-800">{uiText.recipeIngredients}</h3>
            <ul className="list-disc list-inside space-y-3 text-gray-700">
              {recipe.ingredients.map((ingredient, index) => (
                <li key={index}>{ingredient}</li>
              ))}
            </ul>
          </div>
          
          <div className="bg-emerald-50/50 p-6 rounded-xl animate-fadeInUp">
            <h3 className="text-2xl font-semibold mb-4 border-b-2 border-emerald-300 pb-2 text-emerald-800">{uiText.recipeInstructions}</h3>
            <ol className="list-decimal list-outside space-y-4 text-gray-700 leading-relaxed ml-5">
              {recipe.instructions.map((step, index) => (
                <li key={index}>{step}</li>
              ))}
            </ol>
          </div>
        </div>
      </div>
      
      {/* Hidden components for clean exports */}
      <div className="absolute -left-[9999px] -top-[9999px]">
        <RecipeImageExport recipe={recipe} ref={exportImageRefDesktop} layout="desktop" uiText={uiText} />
        <RecipeImageExport recipe={recipe} ref={exportImageRefMobile} layout="mobile" uiText={uiText} />
        <RecipeImageExport recipe={recipe} ref={exportPdfRef} uiText={uiText} isForPdf={true} />
      </div>
    </>
  );
};

export default RecipeDisplay;