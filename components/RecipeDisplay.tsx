import React, { useRef, useState, useEffect } from 'react';
import type { Recipe, UiText } from '../types';
import DownloadIcon from './icons/DownloadIcon';
import FileTextIcon from './icons/FileTextIcon';
import ImageIcon from './icons/ImageIcon';
import ShareIcon from './icons/ShareIcon';


// This tells TypeScript that html2canvas is available globally from the script tag in index.html
declare const html2canvas: any;

interface RecipeDisplayProps {
  recipe: Recipe;
  imageUrl: string;
  onDownload: () => void;
  uiText: UiText;
}

const RecipeDisplay: React.FC<RecipeDisplayProps> = ({ recipe, imageUrl, onDownload, uiText }) => {
  const recipeCardRef = useRef<HTMLDivElement>(null);
  const [isSavingImage, setIsSavingImage] = useState(false);
  const [isCopied, setIsCopied] = useState(false);
  
  const webShareSupported = typeof navigator !== 'undefined' && !!navigator.share;

  useEffect(() => {
    let timeout: number;
    if (isCopied) {
      timeout = window.setTimeout(() => setIsCopied(false), 2000);
    }
    return () => clearTimeout(timeout);
  }, [isCopied]);
  
  const formatRecipeAsText = (): string => {
    const title = `RECIPE: ${recipe.recipeName}\n\n`;
    const description = `DESCRIPTION:\n${recipe.description}\n\n`;
    const ingredientsHeader = `--------------------\n\n${uiText.recipeIngredients.toUpperCase()}:\n`;
    const ingredientsList = recipe.ingredients.map(i => `- ${i}`).join('\n');
    const instructionsHeader = `\n\n--------------------\n\n${uiText.recipeInstructions.toUpperCase()}:\n`;
    const instructionsList = recipe.instructions.map((step, index) => `${index + 1}. ${step}`).join('\n');
    const footer = `\n\n--------------------\n\nGenerated by Toma AI`;
    return `${title}${description}${ingredientsHeader}${ingredientsList}${instructionsHeader}${instructionsList}${footer}`;
  };

  const handleDownloadTxt = () => {
    const textContent = formatRecipeAsText();
    const blob = new Blob([textContent], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `${recipe.recipeName.toLowerCase().replace(/\s+/g, '_')}_recipe.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const handleDownloadPng = async () => {
    const element = recipeCardRef.current;
    if (!element) return;
    
    setIsSavingImage(true);
    try {
        element.classList.add('print-mode');
        const canvas = await html2canvas(element, {
            useCORS: true,
            scale: 2 // Generate a higher resolution image
        });
        const link = document.createElement('a');
        link.href = canvas.toDataURL('image/png');
        link.download = `${recipe.recipeName.toLowerCase().replace(/\s+/g, '_')}_recipe.png`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } catch (error) {
        console.error("Error saving recipe as image:", error);
    } finally {
        element.classList.remove('print-mode');
        setIsSavingImage(false);
    }
  };
  
  const handleShare = async () => {
    const shareText = formatRecipeAsText();
    if (webShareSupported) {
      try {
        await navigator.share({
          title: `Toma AI Recipe: ${recipe.recipeName}`,
          text: shareText,
        });
      } catch (error) {
        console.error("Error sharing recipe:", error);
      }
    } else {
      // Fallback to clipboard
      try {
        await navigator.clipboard.writeText(shareText);
        setIsCopied(true);
      } catch (error) {
        console.error("Error copying to clipboard:", error);
        alert("Failed to copy recipe to clipboard.");
      }
    }
  };

  const ExportButton: React.FC<{onClick: () => void, disabled?: boolean, icon: React.ReactNode, text: string}> = ({ onClick, disabled, icon, text }) => (
    <button
      onClick={onClick}
      disabled={disabled}
      className="flex items-center gap-2 px-4 py-2 bg-white/80 backdrop-blur-sm border border-gray-200/80 rounded-full shadow-md text-sm font-medium text-gray-700 hover:bg-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500 transition-all disabled:opacity-50 disabled:cursor-wait"
    >
      {icon}
      <span>{text}</span>
    </button>
  );

  return (
    <div ref={recipeCardRef} className="max-w-4xl mx-auto mt-12 bg-white/70 backdrop-blur-sm p-6 md:p-10 rounded-2xl shadow-lg border border-white/80 animate-fadeInUp">
      <div className="text-center mb-8">
        <h2 className="text-4xl font-bold bg-gradient-to-r from-emerald-600 to-teal-500 bg-clip-text text-transparent pb-2">
          {recipe.recipeName}
        </h2>
        <p className="mt-2 text-gray-600 italic max-w-2xl mx-auto">{recipe.description}</p>
      </div>

      <div className="mb-8">
        <div className="relative group">
          <img src={imageUrl} alt={recipe.recipeName} className="w-full h-auto object-cover rounded-xl shadow-lg" />
          <button
            onClick={onDownload}
            className="absolute bottom-4 right-4 flex items-center gap-2 bg-gray-900 bg-opacity-60 text-white px-4 py-2 rounded-full text-sm font-medium hover:bg-opacity-80 transition-all opacity-0 group-hover:opacity-100"
          >
            <DownloadIcon className="w-4 h-4"/>
            {uiText.imageDownload}
          </button>
        </div>
        <p className="text-xs text-gray-500 italic text-center mt-2">
          This image is for illustration purposes, not the actual product.
        </p>
      </div>
      
      <div className="text-center my-8 py-4 border-y border-gray-200/80">
        <h4 className="text-sm font-bold uppercase text-gray-500 tracking-wider mb-4">{uiText.exportTitle}</h4>
        <div className="flex flex-wrap justify-center items-center gap-4">
            <ExportButton onClick={handleDownloadTxt} icon={<FileTextIcon className="w-5 h-5 text-emerald-700" />} text={uiText.saveAsText} />
            <ExportButton onClick={handleDownloadPng} disabled={isSavingImage} icon={<ImageIcon className="w-5 h-5 text-emerald-700" />} text={isSavingImage ? uiText.saveAsImageSaving : uiText.saveAsImage} />
            <ExportButton onClick={handleShare} icon={<ShareIcon className="w-5 h-5 text-emerald-700" />} text={!webShareSupported && isCopied ? uiText.shareCopied : uiText.share} />
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div className="bg-emerald-50/50 p-6 rounded-xl">
          <h3 className="text-2xl font-semibold mb-4 border-b-2 border-emerald-300 pb-2 text-emerald-800">{uiText.recipeIngredients}</h3>
          <ul className="list-disc list-inside space-y-3 text-gray-700">
            {recipe.ingredients.map((ingredient, index) => (
              <li key={index}>{ingredient}</li>
            ))}
          </ul>
        </div>
        
        <div className="bg-emerald-50/50 p-6 rounded-xl">
          <h3 className="text-2xl font-semibold mb-4 border-b-2 border-emerald-300 pb-2 text-emerald-800">{uiText.recipeInstructions}</h3>
          <ol className="list-decimal list-inside space-y-4 text-gray-700 leading-relaxed">
            {recipe.instructions.map((step, index) => (
              <li key={index}>{step}</li>
            ))}
          </ol>
        </div>
      </div>
    </div>
  );
};

export default RecipeDisplay;